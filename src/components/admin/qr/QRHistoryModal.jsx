import React, { useEffect, useState } from 'react';
import { useQRCode } from '../../../context/QRCodeContext';

const QRHistoryModal = ({ show, onClose, type = null, resourceId = null }) => {
  const { history, fetchHistory, loading } = useQRCode();
  const [filter, setFilter] = useState(type || 'all');

  useEffect(() => {
    if (show) {
      fetchHistory(filter === 'all' ? null : filter, resourceId);
    }
  }, [show, filter, resourceId]);

  if (!show) return null;

  return (
    <div className="modal-backdrop">
      <div className="modal-container large-modal">
        <div className="modal-header">
          <h3>QR Code Generation History</h3>
          <button className="close-button" onClick={onClose}>
            <i className="fas fa-times"></i>
          </button>
        </div>

        <div className="modal-body">
          {!resourceId && (
            <div className="filter-bar">
              <select
                className="form-control"
                value={filter}
                onChange={(e) => setFilter(e.target.value)}
              >
                <option value="all">All Types</option>
                <option value="SEAT">Seats Only</option>
                <option value="ROOM">Rooms Only</option>
              </select>
            </div>
          )}

          {loading ? (
            <div className="loading">Loading history...</div>
          ) : (
            <div className="history-table">
              <table className="table">
                <thead>
                  <tr>
                    <th>Type</th>
                    <th>Resource ID</th>
                    <th>Version</th>
                    <th>Generated By</th>
                    <th>Generated At</th>
                    <th>Reason</th>
                    <th>Status</th>
                  </tr>
                </thead>
                <tbody>
                  {history.map((log) => (
                    <tr key={log.id}>
                      <td>
                        <span className={`badge badge-${log.resourceType.toLowerCase()}`}>
                          {log.resourceType}
                        </span>
                      </td>
                      <td>{log.resourceId}</td>
                      <td>v{log.qrVersion}</td>
                      <td>{log.generatedBy}</td>
                      <td>{new Date(log.generatedAt).toLocaleString()}</td>
                      <td>{log.generationReason}</td>
                      <td>
                        <span className={`status-badge ${log.isCurrent ? 'active' : 'archived'}`}>
                          {log.isCurrent ? 'Current' : 'Archived'}
                        </span>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
              {history.length === 0 && (
                <div className="empty-state">
                  <p>No QR generation history found</p>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default QRHistoryModal;

